\begin{thebibliography}{1}

\bibitem{OUnit}
O{U}nit.
\newblock \url{hhttp://ounit.forge.ocamlcore.org/}.
\newblock OCaml unit testing framework.

\bibitem{PUnit}
Jan Wielemaker.
\newblock Prolog {U}nit {T}ests.
\newblock
  \url{http://www.swi-prolog.org/pldoc/doc_for?object=section(%27packages/plunit.html%27)}.
\newblock SWI-Prolog Documentation.

\bibitem{SpaceT}
Memory profiling with {S}pacetime.
\newblock \url{https://caml.inria.fr/pub/docs/manual-ocaml/spacetime.html}.
\newblock OCaml Documentation.

\bibitem{PExec}
Execution profiling.
\newblock \url{http://www.swi-prolog.org/pldoc/man?section=profile}.
\newblock SWI-Prolog Documentation.

\bibitem{costsBenefitsAbstract}
Thomas~W. Getzinger.
\newblock The costs and benefits of abstract interpretation-driven prolog
  optimization.
\newblock In {\em Proceedings of the First International Static Analysis
  Symposium on Static Analysis}, 1994.

\bibitem{autoMode}
Saumya~K. Debray and David~S. Warren.
\newblock Automatic mode inference for logic programs.
\newblock {\em The Journal of Logic Programming}, 5(3):207 -- 229, 1988.

\bibitem{mycroftTypes}
Alan Mycroft and Richard~A. O'Keefe.
\newblock A polymorphic type system for prolog.
\newblock {\em Artificial Intelligence}, 23(3):295 -- 307, 1984.

\bibitem{ocamlBook}
Jason~Hickey Anil~Madhavapeddy and Yaron Minsky.
\newblock {\em Real World OCaml: Functional Programming for the Masses}.
\newblock O'Reilly Media.

\bibitem{ocamlyak}
Lexer and parser generators (ocamllex, ocamlyacc).
\newblock \url{https://caml.inria.fr/pub/docs/manual-ocaml/lexyacc.html}.
\newblock OCaml Documentation.

\end{thebibliography}
